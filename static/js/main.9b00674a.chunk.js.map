{"version":3,"sources":["components/title.js","components/description.js","components/sketch.js","components/button.js","logic/matrix.js","logic/helpers.js","logic/neural-network.js","logic/mnist.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","Description","split","map","index","Fragment","key","Sketch","props","newSketch","hasOwnProperty","sketch","remove","p5","p","setup","width","Math","min","window","innerWidth","height","isSquare","innerHeight","createCanvas","parent","renderRef","current","background","draw","clearRequested","onClear","strokeWeight","stroke","mouseIsPressed","mouseX","mouseY","line","pmouseX","pmouseY","mouseReleased","img","get","resize","loadPixels","input","i","color","pixels","onDraw","React","createRef","addEventListener","this","removeEventListener","ref","Component","defaultProps","Button","value","loadingValue","isLoading","onClick","className","type","e","target","blur","Matrix","rows","cols","matrix","add","console","log","x","j","data","sub","mul","toArray","arr","push","copy","_","func","randomize","random","randomizeNormal","u","v","sqrt","cos","PI","print","table","Array","fill","matrix1","matrix2","sum","k","transpose","fromArray","length","sigmoid","exp","sigmoidDerivative","shuffle","randomIndex","floor","temp","NeuralNetwork","sizes","neuralNetwork","feedforward","output","numLayers","bias","biases","weight","weights","stochasticGradientDescent","trainingDatas","epochs","miniBatchSize","learningRate","testDatas","trainingDataSize","miniBatches","miniBatch","updateMiniBatch","evaluate","biasesGradient","createEmptyGradient","weightsGradient","getMiniBatchGradient","applyMiniBatchGradient","trainingData","desiredOutput","gradientDelta","backpropagate","biasesGradientDelta","weightsGradientDelta","biasGradient","weightGradient","biasGradientDelta","weightGradientDelta","zs","activations","trainingFeedforward","outputError","getOutputError","hiddenError","getHiddenError","gradient","targetMatrix","gradientMatrix","z","a","outputActivation","costDerivative","outputZ","outputZSigmoidDerivative","nextError","nextWeights","nextWeightsTranspose","zSigmoidDerivative","count","testData","outputArr","desiredOutputArr","indexOf","max","gradientCheck","desiredArr","epsilon","pow","gradApprox","r","c","original","outputPlus","costPlus","outputMinus","costMinus","gradApproxVal","paramSum","paramApproxSum","gradientVal","size","loadFile","file","async","fetch","response","arrayBuffer","buffer","headerCount","headerView","DataView","headers","getUint32","dataLength","Error","Uint8Array","dataArr","subarray","loadMNIST","callback","mnist","files","trainingImages","trainingLabels","Promise","all","Object","keys","then","App","handleClickTrain","undefined","setState","isTraining","timer","setTimeout","dataFormatted","images","labels","datas","inputArr","desiredInteger","loadDatas","slice","prevState","clearTimeout","handleClickGuess","state","guess","handleClickClear","handleClear","handleDraw","handleSwitchChange","usePretrained","neuralNetworkPretrained","id","checked","onChange","htmlFor","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b00674a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Description = ({ text }) => {\r\n  const addLineBreaks = string =>\r\n    string.split(\"\\n\").map((text, index) => (\r\n      <React.Fragment key={`${text}-${index}`}>\r\n        {text}\r\n        <br />\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return <h5>{addLineBreaks(text)}</h5>;\r\n};\r\n\r\nDescription.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Description;\r\n","import React, { Component } from \"react\";\r\nimport p5 from \"p5\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Sketch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderRef = new React.createRef();\r\n    this.newSketch();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.newSketch);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.newSketch);\r\n  }\r\n\r\n  newSketch = () => {\r\n    if (this.hasOwnProperty(\"sketch\")) {\r\n      this.sketch.remove();\r\n    }\r\n\r\n    this.sketch = new p5(p => {\r\n      p.setup = () => {\r\n        let width = Math.min(this.props.width, window.innerWidth * 0.8);\r\n        let height = this.props.isSquare\r\n          ? width\r\n          : Math.min(this.props.height, window.innerHeight * 0.8);\r\n        p.createCanvas(width, height).parent(this.renderRef.current);\r\n        p.background(\"#d3d3d3\");\r\n      };\r\n\r\n      p.draw = () => {\r\n        if (this.props.clearRequested) {\r\n          p.background(\"#d3d3d3\");\r\n          this.props.onClear();\r\n        }\r\n\r\n        p.strokeWeight(32);\r\n        p.stroke(0);\r\n        if (\r\n          p.mouseIsPressed &&\r\n          p.mouseX > 0 &&\r\n          p.mouseX < p.width &&\r\n          p.mouseY > 0 &&\r\n          p.mouseY < p.height\r\n        ) {\r\n          p.line(p.pmouseX, p.pmouseY, p.mouseX, p.mouseY);\r\n        }\r\n      };\r\n\r\n      p.mouseReleased = () => {\r\n        if (\r\n          p.mouseX > 0 &&\r\n          p.mouseX < p.width &&\r\n          p.mouseY > 0 &&\r\n          p.mouseY < p.height\r\n        ) {\r\n          let img = p.get();\r\n          img.resize(28, 28);\r\n          img.loadPixels();\r\n\r\n          let input = [];\r\n          for (let i = 0; i < 28 * 28; i++) {\r\n            let color = img.pixels[i * 4];\r\n            input[i] = color === 211 ? 0 : (255 - color) / 255;\r\n          }\r\n          this.props.onDraw(input);\r\n        }\r\n        return false;\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <div ref={this.renderRef}></div>;\r\n  }\r\n}\r\n\r\nSketch.defaultProps = {\r\n  width: 100,\r\n  height: 100,\r\n  isSquare: true\r\n};\r\n\r\nSketch.propTypes = {\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  isSquare: PropTypes.bool,\r\n  onDraw: PropTypes.func,\r\n  clearRequested: PropTypes.bool,\r\n  onClear: PropTypes.func\r\n};\r\n\r\nexport default Sketch;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, loadingValue, isLoading, onClick }) => {\r\n  const handleOnClick = e => {\r\n    e.target.blur();\r\n    onClick();\r\n  };\r\n\r\n  const content = () => {\r\n    if (isLoading) {\r\n      return (\r\n        <React.Fragment>\r\n          <span className=\"spinner-grow spinner-grow-sm mr-2 mb-1\"></span>\r\n          {loadingValue}\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      onClick={handleOnClick}\r\n    >\r\n      {content()}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  loadingValue: PropTypes.string,\r\n  isLoading: PropTypes.bool,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default Button;\r\n","class Matrix {\r\n  constructor(rows, cols, matrix) {\r\n    if (matrix) {\r\n      // Deep copy\r\n      this.rows = matrix.rows;\r\n      this.cols = matrix.cols;\r\n      this.data = [];\r\n      for (let i = 0; i < this.rows; i++) {\r\n        this.data.push([]);\r\n        for (let j = 0; j < this.cols; j++) {\r\n          this.data[i].push(matrix.data[i][j]);\r\n        }\r\n      }\r\n    } else {\r\n      this.rows = rows;\r\n      this.cols = cols;\r\n      this.data = Array(rows)\r\n        .fill()\r\n        .map(() => Array(cols).fill(0));\r\n    }\r\n  }\r\n\r\n  add = matrix => {\r\n    if (matrix instanceof Matrix) {\r\n      if (this.rows !== matrix.rows || this.cols !== matrix.cols) {\r\n        console.log(\"Add: matrix dimensions must match.\");\r\n        return;\r\n      }\r\n      return this.map((x, i, j) => x + matrix.data[i][j]);\r\n    }\r\n    return this.map(x => x + matrix);\r\n  };\r\n\r\n  static add = (matrix1, matrix2) => {\r\n    if (matrix1.rows !== matrix2.rows || matrix1.cols !== matrix2.cols) {\r\n      console.log(\"Add: matrix dimensions must match.\");\r\n      return;\r\n    }\r\n    return new Matrix(matrix1.rows, matrix1.cols).map(\r\n      (_, i, j) => matrix1.data[i][j] + matrix2.data[i][j]\r\n    );\r\n  };\r\n\r\n  sub = matrix => {\r\n    if (matrix instanceof Matrix) {\r\n      if (this.rows !== matrix.rows || this.cols !== matrix.cols) {\r\n        console.log(\"Subtract: matrix dimensions must match.\");\r\n        return;\r\n      }\r\n      return this.map((x, i, j) => x - matrix.data[i][j]);\r\n    }\r\n    return this.map(x => x - matrix);\r\n  };\r\n\r\n  static sub = (matrix1, matrix2) => {\r\n    if (matrix1.rows !== matrix2.rows || matrix1.cols !== matrix2.cols) {\r\n      console.log(\"Subtract: matrix dimensions must match.\");\r\n      return;\r\n    }\r\n    return new Matrix(matrix1.rows, matrix1.cols).map(\r\n      (_, i, j) => matrix1.data[i][j] - matrix2.data[i][j]\r\n    );\r\n  };\r\n\r\n  mul = matrix => {\r\n    if (matrix instanceof Matrix) {\r\n      if (this.rows !== matrix.rows || this.cols !== matrix.cols) {\r\n        console.log(\"Multiply: matrix dimensions must match.\");\r\n        return;\r\n      }\r\n      return this.map((x, i, j) => x * matrix.data[i][j]);\r\n    }\r\n    return this.map(x => x * matrix);\r\n  };\r\n\r\n  static mul = (matrix1, matrix2) => {\r\n    if (matrix1.cols !== matrix2.rows) {\r\n      console.log(\r\n        \"Multiply: first matrix's columns must match second matrix's rows\"\r\n      );\r\n      return;\r\n    }\r\n    return new Matrix(matrix1.rows, matrix2.cols).map((_, i, j) => {\r\n      let sum = 0;\r\n      for (let k = 0; k < matrix1.cols; k++) {\r\n        sum += matrix1.data[i][k] * matrix2.data[k][j];\r\n      }\r\n      return sum;\r\n    });\r\n  };\r\n\r\n  static transpose = matrix => {\r\n    return new Matrix(matrix.cols, matrix.rows).map(\r\n      (_, i, j) => matrix.data[j][i]\r\n    );\r\n  };\r\n\r\n  static fromArray = arr => {\r\n    return new Matrix(arr.length, 1).map((_, i) => arr[i]);\r\n  };\r\n\r\n  toArray = () => {\r\n    const arr = [];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        arr.push(this.data[i][j]);\r\n      }\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  copy = () => {\r\n    return new Matrix(this.rows, this.cols).map((_, i, j) => this.data[i][j]);\r\n  };\r\n\r\n  map = func => {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        this.data[i][j] = func(this.data[i][j], i, j);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  static map = (matrix, func) => {\r\n    return new Matrix(matrix.rows, matrix.cols).map((_, i, j) =>\r\n      func(matrix.data[i][j], i, j)\r\n    );\r\n  };\r\n\r\n  randomize = () => {\r\n    return this.map(() => Math.random() * 2 - 1);\r\n  };\r\n\r\n  // Box-Muller Transform for normal distribution\r\n  randomizeNormal = () => {\r\n    return this.map(() => {\r\n      let u = 0,\r\n        v = 0;\r\n      while (u === 0) u = Math.random();\r\n      while (v === 0) v = Math.random();\r\n      return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n    });\r\n  };\r\n\r\n  print = () => {\r\n    console.table(this.data);\r\n    return this;\r\n  };\r\n}\r\n\r\nexport default Matrix;\r\n","export const sigmoid = x => {\r\n  return 1 / (1 + Math.exp(-x));\r\n};\r\n\r\nexport const sigmoidDerivative = x => {\r\n  return sigmoid(x) * (1 - sigmoid(x));\r\n};\r\n\r\n/**\r\n * Fisher-Yates shuffle.\r\n * @param {Array} arr The array to shuffle\r\n * @return {Array} The shuffled array\r\n */\r\nexport const shuffle = arr => {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n  return arr;\r\n};\r\n","import Matrix from \"./matrix\";\r\nimport { sigmoid, sigmoidDerivative, shuffle } from \"./helpers\";\r\n\r\nclass NeuralNetwork {\r\n  /**\r\n   * Creates a NeuralNetwork with the givens layer sizes or using the preset settings from the optional NeuralNetwork.\r\n   * @param {Array} sizes An array of layer sizes\r\n   * @param {NeuralNetwork} neuralNetwork Optional initial settings\r\n   */\r\n  constructor(sizes, neuralNetwork) {\r\n    if (neuralNetwork) {\r\n      // Deep copy\r\n      this.numLayers = neuralNetwork.sizes.length;\r\n      this.sizes = [];\r\n      for (let size of neuralNetwork.sizes) {\r\n        this.sizes.push(size);\r\n      }\r\n\r\n      // Copy bias vectors\r\n      this.biases = [];\r\n      for (let bias of neuralNetwork.biases) {\r\n        this.biases.push(new Matrix(null, null, bias));\r\n      }\r\n\r\n      // Copy weight matrices\r\n      this.weights = [];\r\n      for (let weight of neuralNetwork.weights) {\r\n        this.weights.push(new Matrix(null, null, weight));\r\n      }\r\n    } else {\r\n      this.numLayers = sizes.length;\r\n      this.sizes = sizes;\r\n\r\n      // Create bias vectors\r\n      this.biases = [];\r\n      for (let i = 1; i < sizes.length; i++) {\r\n        const bias = new Matrix(sizes[i], 1);\r\n        bias.randomizeNormal();\r\n        this.biases.push(bias);\r\n      }\r\n\r\n      // Create weight matrices\r\n      this.weights = [];\r\n      for (let i = 1; i < sizes.length; i++) {\r\n        const weight = new Matrix(sizes[i], sizes[i - 1]);\r\n        weight.randomizeNormal();\r\n        this.weights.push(weight);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs feedforward and returns the result as an array.\r\n   * @param {Matrix} input The input as a Matrix object\r\n   * @return {Array} The result as an array\r\n   */\r\n  feedforward = input => {\r\n    let output = input;\r\n\r\n    for (let i = 0; i < this.numLayers - 1; i++) {\r\n      const bias = this.biases[i];\r\n      const weight = this.weights[i];\r\n\r\n      // a = sigmoid(wx + b)\r\n      output = Matrix.mul(weight, output);\r\n      output.add(bias);\r\n      output.map(sigmoid);\r\n    }\r\n\r\n    return output.toArray();\r\n  };\r\n\r\n  /**\r\n   * Performs stochastic gradient descent with the specified hyperparameters.\r\n   * @param {Array} trainingDatas The array of training datas\r\n   * @param {number} epochs The number of epochs to train for\r\n   * @param {number} miniBatchSize The size of the mini batches\r\n   * @param {number} learningRate The learning rate\r\n   * @param {Array} testDatas The optional test datas\r\n   */\r\n  stochasticGradientDescent = (\r\n    trainingDatas,\r\n    epochs,\r\n    miniBatchSize,\r\n    learningRate,\r\n    testDatas = null\r\n  ) => {\r\n    // Training datas = [trainingData == [Matrix(input), Matrix(desiredOutput)]]\r\n    const trainingDataSize = trainingDatas.length;\r\n\r\n    // Train for specified number of epochs\r\n    for (let i = 0; i < epochs; i++) {\r\n      // Shuffle the training datas every epoch\r\n      shuffle(trainingDatas);\r\n\r\n      // Mini batches = [miniBatch == [trainingData == [Matrix(input), Matrix(desiredOutput)]]]\r\n      const miniBatches = [];\r\n      for (let j = 0; j < trainingDataSize; j += miniBatchSize) {\r\n        // Mini batch = [trainingData == [Matrix(input), Matrix(desiredOutput)]]\r\n        const miniBatch = [];\r\n\r\n        // Training data = [Matrix(input), Matrix(desiredOutput)]\r\n        for (let k = j; k < j + miniBatchSize; k++) {\r\n          miniBatch.push(trainingDatas[k]);\r\n        }\r\n        miniBatches.push(miniBatch);\r\n      }\r\n\r\n      // Update each mini batch\r\n      for (let miniBatch of miniBatches) {\r\n        this.updateMiniBatch(miniBatch, learningRate);\r\n      }\r\n\r\n      // Testing\r\n      if (testDatas !== null) {\r\n        console.log(\r\n          \"Epoch \" +\r\n            i +\r\n            \": \" +\r\n            this.evaluate(testDatas) +\r\n            \" / \" +\r\n            testDatas.length\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Updates the mini batch by getting the gradient and then applying it.\r\n   * @param {Array} miniBatch The mini batch of training data\r\n   * @param {number} learningRate The learning rate\r\n   */\r\n  updateMiniBatch = (miniBatch, learningRate) => {\r\n    // Cumulative gradients for mini batch\r\n    const biasesGradient = this.createEmptyGradient(this.biases);\r\n    const weightsGradient = this.createEmptyGradient(this.weights);\r\n    this.getMiniBatchGradient(miniBatch, biasesGradient, weightsGradient);\r\n    this.applyMiniBatchGradient(\r\n      biasesGradient,\r\n      weightsGradient,\r\n      learningRate,\r\n      miniBatch.length\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Calculates the cumulative biases and weights gradients for all training data in the mini batch.\r\n   * @param {Array} miniBatch The mini batch of training data\r\n   * @param {Array} biasesGradient The array representing the cumulative biases gradient\r\n   * @param {Array} weightsGradient The array representing the cumulative weights gradient\r\n   */\r\n  getMiniBatchGradient = (miniBatch, biasesGradient, weightsGradient) => {\r\n    for (let trainingData of miniBatch) {\r\n      const input = trainingData[0];\r\n      const desiredOutput = trainingData[1];\r\n      const gradientDelta = this.backpropagate(input, desiredOutput);\r\n      const biasesGradientDelta = gradientDelta[0];\r\n      const weightsGradientDelta = gradientDelta[1];\r\n\r\n      // this.gradientCheck(\r\n      //   biasesGradientDelta,\r\n      //   this.biases,\r\n      //   input,\r\n      //   desiredOutput\r\n      // );\r\n      // this.gradientCheck(\r\n      //   weightsGradientDelta,\r\n      //   this.weights,\r\n      //   input,\r\n      //   desiredOutput\r\n      // );\r\n\r\n      // Add gradient delta to miniBatch\r\n      for (let i = 0; i < this.numLayers - 1; i++) {\r\n        const biasGradient = biasesGradient[i];\r\n        const weightGradient = weightsGradient[i];\r\n        const biasGradientDelta = biasesGradientDelta[i];\r\n        const weightGradientDelta = weightsGradientDelta[i];\r\n\r\n        biasGradient.add(biasGradientDelta);\r\n        weightGradient.add(weightGradientDelta);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Apply the cumulative biases and weights gradients to the network's biases and weights.\r\n   * @param {Array} biasesGradient The array representing the cumulative biases gradient\r\n   * @param {Array} weightsGradient The array representing the cumulative weights gradient\r\n   * @param {number} learningRate The learning rate\r\n   * @param {Array} miniBatch The mini batch of training data\r\n   */\r\n  applyMiniBatchGradient = (\r\n    biasesGradient,\r\n    weightsGradient,\r\n    learningRate,\r\n    miniBatchSize\r\n  ) => {\r\n    for (let i = 0; i < this.numLayers - 1; i++) {\r\n      const bias = this.biases[i];\r\n      const weight = this.weights[i];\r\n      const biasGradient = biasesGradient[i];\r\n      const weightGradient = weightsGradient[i];\r\n\r\n      // Adding the negative (i.e. subtracting) average gradient for mini batch\r\n      bias.sub(biasGradient.mul(learningRate / miniBatchSize));\r\n      weight.sub(weightGradient.mul(learningRate / miniBatchSize));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Performs backpropagation to calculate the gradient for one training data.\r\n   * @param {Matrix} input The input matrix\r\n   * @param {Matrix} desiredOutput The desired output matrix\r\n   * @return {Array} The array consisting of the biasesGradient and weightsGradient for this one training data\r\n   */\r\n  backpropagate = (input, desiredOutput) => {\r\n    const biasesGradient = this.createEmptyGradient(this.biases);\r\n    const weightsGradient = this.createEmptyGradient(this.weights);\r\n\r\n    // Feedforward, store zs and activations by layer\r\n    const zs = [];\r\n    const activations = [input];\r\n    this.trainingFeedforward(zs, activations);\r\n\r\n    // Output biasesGradient is simply the output delta\r\n    const outputError = this.getOutputError(zs, activations, desiredOutput);\r\n    biasesGradient[biasesGradient.length - 1] = outputError;\r\n\r\n    // Output weightsGradient = outputError * beforeOutputActivationTranspose\r\n    weightsGradient[weightsGradient.length - 1] = Matrix.mul(\r\n      outputError,\r\n      Matrix.transpose(activations[activations.length - 2])\r\n    );\r\n\r\n    // Backpropagate error to hidden layers\r\n    let hiddenError = outputError;\r\n    for (let i = 2; i < this.numLayers; i++) {\r\n      // Hidden biasesGradient is simply the hidden error\r\n      hiddenError = this.getHiddenError(hiddenError, zs, i);\r\n      biasesGradient[biasesGradient.length - i] = hiddenError;\r\n\r\n      // Hidden weightsGradient = hiddenError * beforeHiddenActivationsTranspose\r\n      weightsGradient[weightsGradient.length - i] = Matrix.mul(\r\n        hiddenError,\r\n        Matrix.transpose(activations[activations.length - i - 1])\r\n      );\r\n    }\r\n\r\n    return [biasesGradient, weightsGradient];\r\n  };\r\n\r\n  /**\r\n   * Creates an empty gradient with the target array's shape.\r\n   * @param {Array} target The target array\r\n   * @return {Array} The empty gradient array with in the shape of the target array\r\n   */\r\n  createEmptyGradient = target => {\r\n    const gradient = [];\r\n    for (let targetMatrix of target) {\r\n      const gradientMatrix = new Matrix(targetMatrix.rows, targetMatrix.cols);\r\n      gradient.push(gradientMatrix);\r\n    }\r\n    return gradient;\r\n  };\r\n\r\n  /**\r\n   * Feedforward, but also keeping record of the z's and activations per layer.\r\n   * @param {Array} zs The array to store the z records\r\n   * @param {Array} activations The array to store the activation records\r\n   */\r\n  trainingFeedforward = (zs, activations) => {\r\n    for (let i = 0; i < this.numLayers - 1; i++) {\r\n      const bias = this.biases[i];\r\n      const weight = this.weights[i];\r\n\r\n      // z = wa + b, a = sigmoid(z)\r\n      const z = Matrix.mul(weight, activations[i]);\r\n      z.add(bias);\r\n      zs.push(z);\r\n\r\n      const a = Matrix.map(z, sigmoid);\r\n      activations.push(a);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Calculates the error in the output layer.\r\n   * outputError = (costDerivative == outputActivation - desiredOutput) hadamardProduct outputZSigmoidDerivative.\r\n   * @param {Array} zs The z records\r\n   * @param {Array} activations The activation records\r\n   * @param {Matrix} desiredOutput The desired output matrix\r\n   * @return {Matrix} The output error matrix\r\n   */\r\n  getOutputError = (zs, activations, desiredOutput) => {\r\n    const outputActivation = activations[activations.length - 1];\r\n    const costDerivative = Matrix.sub(outputActivation, desiredOutput);\r\n    const outputZ = zs[zs.length - 1];\r\n    const outputZSigmoidDerivative = Matrix.map(outputZ, sigmoidDerivative);\r\n    const outputError = costDerivative.mul(outputZSigmoidDerivative);\r\n    return outputError;\r\n  };\r\n\r\n  /**\r\n   * Calculates the error in the specified hidden layer.\r\n   * hiddenError = (nextWeightsTranspose * nextError) hadamardProduct sigmoidDerivative(z).\r\n   * @param {Matrix} nextError The next layer's error matrix\r\n   * @param {Array} zs The z records\r\n   * @param {number} i The index offset for the biases and weights of his hidden layer\r\n   * @return {Matrix} The hidden error matrix\r\n   */\r\n  getHiddenError = (nextError, zs, i) => {\r\n    const nextWeights = this.weights[this.weights.length - i + 1];\r\n    const nextWeightsTranspose = Matrix.transpose(nextWeights);\r\n    const z = zs[zs.length - i];\r\n    const zSigmoidDerivative = Matrix.map(z, sigmoidDerivative);\r\n    const hiddenError = Matrix.mul(nextWeightsTranspose, nextError);\r\n    hiddenError.mul(zSigmoidDerivative);\r\n    return hiddenError;\r\n  };\r\n\r\n  /**\r\n   * Returns a count of how many test cases were passed.\r\n   * @param {Array} testDatas The array of test datas\r\n   * @return {number} The number of test cases passed\r\n   */\r\n  evaluate = testDatas => {\r\n    let count = 0;\r\n\r\n    for (let testData of testDatas) {\r\n      const input = testData[0];\r\n      const outputArr = this.feedforward(input);\r\n      const desiredOutputArr = testData[1].toArray();\r\n      const outputInteger = outputArr.indexOf(Math.max(...outputArr));\r\n      const desiredOutputInteger = desiredOutputArr.indexOf(\r\n        Math.max(...desiredOutputArr)\r\n      );\r\n\r\n      if (outputInteger === desiredOutputInteger) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  };\r\n\r\n  /**\r\n   * Performs gradient checking technique, manually calculating the gradient using the limit definition the derivative and a small epsilon.\r\n   * @param {Array} gradient The gradient to check\r\n   * @param {Array} target A reference to the neural network's biases or weights\r\n   * @param {Matrix} input The input matrix\r\n   * @param {Matrix} desiredOutput The desired output matrix\r\n   */\r\n  gradientCheck = (gradient, target, input, desiredOutput) => {\r\n    const desiredArr = desiredOutput.toArray();\r\n    const epsilon = Math.pow(10, -7);\r\n    const gradApprox = this.createEmptyGradient(gradient);\r\n\r\n    for (let i = 0; i < gradApprox.length; i++) {\r\n      for (let r = 0; r < gradApprox[i].rows; r++) {\r\n        for (let c = 0; c < gradApprox[i].cols; c++) {\r\n          // Save the original bias or weight value to restore it at the end\r\n          const original = target[i].data[r][c];\r\n\r\n          // Calculate the cost with plus epsilon\r\n          target[i].data[r][c] = original + epsilon;\r\n          const outputPlus = this.feedforward(input);\r\n          let costPlus = 0;\r\n          for (let j = 0; j < outputPlus.length; j++) {\r\n            costPlus += 0.5 * Math.pow(desiredArr[j] - outputPlus[j], 2);\r\n          }\r\n\r\n          // Calculate the cost with minus epsilon\r\n          target[i].data[r][c] = original - epsilon;\r\n          const outputMinus = this.feedforward(input);\r\n          let costMinus = 0;\r\n          for (let j = 0; j < outputMinus.length; j++) {\r\n            costMinus += 0.5 * Math.pow(desiredArr[j] - outputMinus[j], 2);\r\n          }\r\n\r\n          // Limit definition of derivative\r\n          const gradApproxVal = (costPlus - costMinus) / (2 * epsilon);\r\n          gradApprox[i].data[r][c] = gradApproxVal;\r\n\r\n          // Restore the initial bias or weight value\r\n          target[i].data[r][c] = original;\r\n        }\r\n      }\r\n    }\r\n\r\n    let sum = 0;\r\n    let paramSum = 0;\r\n    let paramApproxSum = 0;\r\n\r\n    // Sum all Euclidean components\r\n    for (let i = 0; i < gradApprox.length; i++) {\r\n      for (let r = 0; r < gradApprox[i].rows; r++) {\r\n        for (let c = 0; c < gradApprox[i].cols; c++) {\r\n          const gradientVal = gradient[i].data[r][c];\r\n          const gradApproxVal = gradApprox[i].data[r][c];\r\n\r\n          paramSum += Math.pow(gradientVal, 2);\r\n          paramApproxSum += Math.pow(gradApproxVal, 2);\r\n          sum += Math.pow(gradApproxVal - gradientVal, 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Euclidean norm\r\n    sum = Math.sqrt(sum);\r\n    sum /= Math.sqrt(paramApproxSum) + Math.sqrt(paramSum);\r\n\r\n    // Should be less than 10^-7\r\n    console.log(\"Sum\", sum);\r\n  };\r\n}\r\n\r\nexport default NeuralNetwork;\r\n","/**\r\n * Loads the MNIST data.\r\n * @param {function} callback The callback function to be called when loading is finished\r\n * @return {Promise} The resolved promise\r\n */\r\nfunction loadMNIST(callback) {\r\n  let mnist = {};\r\n  let files = {\r\n    trainingImages: \"./train-images.idx3-ubyte\",\r\n    trainingLabels: \"./train-labels.idx1-ubyte\"\r\n    // testImages: \"./t10k-images.idx3-ubyte\",\r\n    // testLabels: \"./t10k-labels.idx1-ubyte\"\r\n  };\r\n  return Promise.all(\r\n    Object.keys(files).map(async file => {\r\n      mnist[file] = await loadFile(files[file]);\r\n    })\r\n  ).then(() => callback(mnist));\r\n}\r\n\r\n/**\r\n * Parses the MNIST file into an array of data.\r\n * @param {string} file The filename\r\n * @return {Array} The MNIST data\r\n */\r\nasync function loadFile(file) {\r\n  let response = await fetch(file);\r\n  let buffer = await response.arrayBuffer();\r\n  let headerCount = 4;\r\n  let headerView = new DataView(buffer, 0, 4 * headerCount);\r\n  let headers = new Array(headerCount)\r\n    .fill()\r\n    .map((_, i) => headerView.getUint32(4 * i, false));\r\n\r\n  let type, dataLength;\r\n  if (headers[0] === 2049) {\r\n    type = \"label\";\r\n    dataLength = 1;\r\n    headerCount = 2;\r\n  } else if (headers[0] === 2051) {\r\n    type = \"image\";\r\n    dataLength = headers[2] * headers[3];\r\n  } else {\r\n    throw new Error(\"Unknown file type \" + headers[0]);\r\n  }\r\n\r\n  let data = new Uint8Array(buffer, headerCount * 4);\r\n  if (type === \"image\") {\r\n    let dataArr = [];\r\n    for (let i = 0; i < headers[1]; i++) {\r\n      dataArr.push(data.subarray(dataLength * i, dataLength * (i + 1)));\r\n    }\r\n    return dataArr;\r\n  }\r\n  return data;\r\n}\r\n\r\nexport default loadMNIST;\r\n","import React, { Component } from \"react\";\nimport Title from \"./components/title\";\nimport Description from \"./components/description\";\nimport Sketch from \"./components/sketch\";\nimport Button from \"./components/button\";\nimport NeuralNetwork from \"./logic/neural-network\";\nimport Matrix from \"./logic/matrix\";\nimport loadMNIST from \"./logic/mnist\";\nimport neuralNetworkPretrained from \"./neural-network-pretrained.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      epochs: 0,\n      guess: \"\",\n      pixels: Array(784).fill(0),\n      clearRequested: false,\n      isTraining: false,\n      usePretrained: true\n    };\n\n    this.dataFormatted = false;\n    loadMNIST(data => {\n      this.mnist = data;\n      this.neuralNetwork = new NeuralNetwork(null, neuralNetworkPretrained);\n    });\n  }\n\n  handleClickTrain = () => {\n    if (this.neuralNetwork !== undefined) {\n      this.setState({ isTraining: true });\n      this.timer = setTimeout(() => {\n        if (!this.dataFormatted) {\n          this.dataFormatted = true;\n\n          const loadDatas = (images, labels) => {\n            const datas = [];\n\n            for (let i = 0; i < images.length; i++) {\n              const inputArr = images[i];\n              const desiredInteger = labels[i];\n              const desiredArr = [];\n\n              for (let j = 0; j < 10; j++) {\n                if (desiredInteger === j) {\n                  desiredArr.push(1);\n                } else {\n                  desiredArr.push(0);\n                }\n              }\n\n              datas.push([\n                Matrix.fromArray(inputArr).map(x => x / 255),\n                Matrix.fromArray(desiredArr)\n              ]);\n            }\n\n            return datas;\n          };\n\n          this.trainingDatas = loadDatas(\n            this.mnist.trainingImages.slice(0, 50000),\n            this.mnist.trainingLabels.slice(0, 50000)\n          );\n          // this.testDatas = loadDatas(\n          //   this.mnist.testImages.slice(0, 10000),\n          //   this.mnist.testLabels.slice(0, 10000)\n          // );\n        }\n\n        this.neuralNetwork.stochasticGradientDescent(\n          this.trainingDatas,\n          1,\n          10,\n          3.0\n          // this.testDatas\n        );\n\n        this.setState(prevState => ({\n          epochs: prevState.epochs + 1,\n          isTraining: false\n        }));\n\n        clearTimeout(this.timer);\n      }, 250);\n    }\n  };\n\n  handleClickGuess = () => {\n    if (this.neuralNetwork !== undefined) {\n      const input = Matrix.fromArray(this.state.pixels);\n      const outputArr = this.neuralNetwork.feedforward(input);\n      const guess = outputArr.indexOf(Math.max(...outputArr));\n      this.setState({\n        guess\n      });\n    }\n  };\n\n  handleClickClear = () => {\n    this.setState({ clearRequested: true });\n  };\n\n  handleClear = () => {\n    this.setState({\n      pixels: Array(784).fill(0),\n      clearRequested: false,\n      guess: \"\"\n    });\n  };\n\n  handleDraw = pixels => {\n    this.setState({\n      pixels\n    });\n  };\n\n  handleSwitchChange = () => {\n    this.setState(\n      prevState => ({ usePretrained: !prevState.usePretrained }),\n      () => {\n        this.neuralNetwork = this.state.usePretrained\n          ? new NeuralNetwork(null, neuralNetworkPretrained)\n          : new NeuralNetwork([784, 30, 10]);\n        this.setState({ epochs: 0 });\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App container text-center pt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title text=\"Handwritten Digits Neural Network\" />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Description\n              text={\n                'Recognizes handwritten digits using a neural network.\\nDraw a number from 0 to 9 and have the neural network guess what you drew.\\nTry to center and scale your drawing to fill the majority of the canvas.\\nPress the \"train\" button to train the neural network for one epoch.\\nOr just use the pre-trained neural network.\\n*Training may take a few minutes depending on your computer.'\n              }\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col custom-control custom-switch\">\n            <input\n              type=\"checkbox\"\n              className=\"custom-control-input\"\n              id=\"customSwitch\"\n              checked={this.state.usePretrained}\n              onChange={this.handleSwitchChange}\n            />\n            <label className=\"custom-control-label\" htmlFor=\"customSwitch\">\n              Use pre-trained neural network\n            </label>\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col-4 col-md-3 col-xl-2\">\n            <Button\n              value=\"Train\"\n              loadingValue=\"Training...\"\n              isLoading={this.state.isTraining}\n              onClick={this.handleClickTrain}\n            />\n          </div>\n          <div className=\"col-4 col-md-3 col-xl-2\">\n            <Button value=\"Guess\" onClick={this.handleClickGuess} />\n          </div>\n          <div className=\"col-4 col-md-3 col-xl-2\">\n            <Button value=\"Clear\" onClick={this.handleClickClear} />\n          </div>\n        </div>\n        <div className=\"row pt-3\">\n          <div className=\"col\">\n            <Sketch\n              width={500}\n              height={500}\n              onDraw={pixels => this.handleDraw(pixels)}\n              clearRequested={this.state.clearRequested}\n              onClear={this.handleClear}\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center pb-5\">\n          <div className=\"col-6 col-lg-4\">\n            <h5>Epochs: {this.state.epochs}</h5>\n          </div>\n          <div className=\"col-6 col-lg-4\">\n            <h5>Guess: {this.state.guess}</h5>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}